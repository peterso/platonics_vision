#!/usr/bin/env python3
import rospy
import actionlib

from slider_solver import SliderSolver
from skills_manager.msg import SolveSliderAction, SolveSliderGoal, SolveSliderFeedback, SolveSliderResult
from platonics_vision.srv import SavingTemplate, SavingTemplateRequest, SavingTemplateResponse
from platonics_vision.triangle_detection_template import TriangleTemplate

from panda_ros.pose_transform_functions import pose_2_transformation

class SliderSolverServer():
    def __init__(self):
        rospy.init_node("slider_node")
        self._slider_solver = SliderSolver()
        self._triangles_template = TriangleTemplate()
        self.establish_ros_connections()

    def establish_ros_connections(self):
        self._slider_solver_action_server = actionlib.SimpleActionServer(
            'solveSlider', SolveSliderAction, self.solve_slider, auto_start=False
        )
        self._slider_solver_action_server.start()
        rospy.Service("save_triangles_templates_service", SavingTemplate, self.handle_save_template_request)

    def solve_slider(self, goal: SolveSliderGoal):
        result = SolveSliderResult()
        feedback = SolveSliderFeedback()
        task_stage = goal.task_stage
        result.success = False
        self._slider_solver.execute_start(task_stage)
        while not(self._slider_solver.end):
            success = self._slider_solver.execute_step(task_stage)
            if self._slider_solver_action_server.is_preempt_requested():
                result.success = False
                self._slider_solver_action_server.set_preempted(result)
                break
            if self._slider_solver.triangles_distance is not None:
                feedback.triangles_distance = self._slider_solver.triangles_distance
                self._slider_solver_action_server.publish_feedback(feedback)
            if success:
                result.success = True
                self._slider_solver_action_server.set_succeeded(result)
                break

    def handle_save_template_request(self, req: SavingTemplateRequest):
        name_template = self._slider_solver._triangle_detector.image_dir_path + req.template_name.data
        print("Recording template name: ", name_template)
        self._triangles_template.record(img=self._slider_solver._triangle_detector.curr_image, name=name_template)
        response = SavingTemplateResponse()
        response.success.data = True
        return response

    def run(self):
        while not rospy.is_shutdown():
            self._slider_solver.rate.sleep()

if __name__ == "__main__":
    node = SliderSolverServer()
    try:
        node.run()
    except rospy.ROSInterruptException:
        pass

